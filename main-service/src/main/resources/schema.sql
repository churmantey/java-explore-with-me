DROP TABLE IF EXISTS LOCATIONS CASCADE;
DROP TABLE IF EXISTS COMPILATION_EVENTS CASCADE;
DROP TABLE IF EXISTS COMPILATIONS ;
DROP TABLE IF EXISTS PARTICIPATION_REQUESTS CASCADE;
DROP TABLE IF EXISTS EVENTS CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS CATEGORIES;

CREATE TABLE IF NOT EXISTS USERS (
  ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  NAME VARCHAR(250) NOT NULL,
  EMAIL VARCHAR(254) UNIQUE NOT NULL
 );

CREATE TABLE IF NOT EXISTS CATEGORIES (
  ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  NAME VARCHAR(50) UNIQUE NOT NULL
 );

CREATE TABLE IF NOT EXISTS EVENTS (
  ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  CATEGORY_ID BIGINT REFERENCES CATEGORIES(ID) NOT NULL,
  INITIATOR_ID BIGINT REFERENCES USERS(ID) NOT NULL,
  TITLE VARCHAR(120) NOT NULL,
  ANNOTATION VARCHAR(2000) NOT NULL,
  DESCRIPTION VARCHAR(7000) NOT NULL,
  EVENT_DATE TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  LOCATION_LAT NUMERIC(9, 6),
  LOCATION_LON NUMERIC(10, 6),
  PAID BOOLEAN DEFAULT FALSE,
  PARTICIPANT_LIMIT INTEGER,
  CREATED_ON TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  PUBLISHED_ON TIMESTAMP WITHOUT TIME ZONE,
  REQUEST_MODERATION BOOLEAN DEFAULT FALSE,
  STATE VARCHAR(50),
  CONFIRMED_REQUESTS BIGINT,
  VIEWS BIGINT
 );

CREATE TABLE IF NOT EXISTS PARTICIPATION_REQUESTS (
    ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    EVENT_ID BIGINT REFERENCES EVENTS(ID) ON DELETE CASCADE,
    REQUESTER_ID BIGINT REFERENCES USERS(ID) ON DELETE CASCADE,
    CREATED_ON TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    STATE VARCHAR(50),
    UNIQUE (EVENT_ID, REQUESTER_ID)
);

CREATE TABLE IF NOT EXISTS COMPILATIONS (
    ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    TITLE VARCHAR(50),
    PINNED BOOLEAN
);

CREATE TABLE IF NOT EXISTS COMPILATION_EVENTS (
    COMPILATION_ID BIGINT REFERENCES COMPILATIONS(ID) ON DELETE CASCADE,
    EVENT_ID BIGINT REFERENCES EVENTS(ID) ON DELETE CASCADE,
    PRIMARY KEY(COMPILATION_ID, EVENT_ID)
);

CREATE TABLE IF NOT EXISTS LOCATIONS (
  ID BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  TITLE VARCHAR(50) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR(2000),
  LATITUDE NUMERIC(8, 6),
  LONGITUDE NUMERIC(9, 6),
  STATE VARCHAR(50)
 );

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;